// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/webmin7761/go-school/homework/final/internal/data/ent/fare"
	"github.com/webmin7761/go-school/homework/final/internal/data/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFare = "Fare"
)

// FareMutation represents an operation that mutates the Fare nodes in the graph.
type FareMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	org_airport       *string
	arr_airport       *string
	passage_type      *string
	first_travel_date *time.Time
	last_travel_date  *time.Time
	amount            *float64
	addamount         *float64
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Fare, error)
	predicates        []predicate.Fare
}

var _ ent.Mutation = (*FareMutation)(nil)

// fareOption allows management of the mutation configuration using functional options.
type fareOption func(*FareMutation)

// newFareMutation creates new mutation for the Fare entity.
func newFareMutation(c config, op Op, opts ...fareOption) *FareMutation {
	m := &FareMutation{
		config:        c,
		op:            op,
		typ:           TypeFare,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFareID sets the ID field of the mutation.
func withFareID(id int64) fareOption {
	return func(m *FareMutation) {
		var (
			err   error
			once  sync.Once
			value *Fare
		)
		m.oldValue = func(ctx context.Context) (*Fare, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fare.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFare sets the old Fare of the mutation.
func withFare(node *Fare) fareOption {
	return func(m *FareMutation) {
		m.oldValue = func(context.Context) (*Fare, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FareMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FareMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Fare entities.
func (m *FareMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FareMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetOrgAirport sets the "org_airport" field.
func (m *FareMutation) SetOrgAirport(s string) {
	m.org_airport = &s
}

// OrgAirport returns the value of the "org_airport" field in the mutation.
func (m *FareMutation) OrgAirport() (r string, exists bool) {
	v := m.org_airport
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgAirport returns the old "org_airport" field's value of the Fare entity.
// If the Fare object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FareMutation) OldOrgAirport(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrgAirport is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrgAirport requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgAirport: %w", err)
	}
	return oldValue.OrgAirport, nil
}

// ResetOrgAirport resets all changes to the "org_airport" field.
func (m *FareMutation) ResetOrgAirport() {
	m.org_airport = nil
}

// SetArrAirport sets the "arr_airport" field.
func (m *FareMutation) SetArrAirport(s string) {
	m.arr_airport = &s
}

// ArrAirport returns the value of the "arr_airport" field in the mutation.
func (m *FareMutation) ArrAirport() (r string, exists bool) {
	v := m.arr_airport
	if v == nil {
		return
	}
	return *v, true
}

// OldArrAirport returns the old "arr_airport" field's value of the Fare entity.
// If the Fare object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FareMutation) OldArrAirport(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldArrAirport is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldArrAirport requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArrAirport: %w", err)
	}
	return oldValue.ArrAirport, nil
}

// ResetArrAirport resets all changes to the "arr_airport" field.
func (m *FareMutation) ResetArrAirport() {
	m.arr_airport = nil
}

// SetPassageType sets the "passage_type" field.
func (m *FareMutation) SetPassageType(s string) {
	m.passage_type = &s
}

// PassageType returns the value of the "passage_type" field in the mutation.
func (m *FareMutation) PassageType() (r string, exists bool) {
	v := m.passage_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPassageType returns the old "passage_type" field's value of the Fare entity.
// If the Fare object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FareMutation) OldPassageType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassageType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassageType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassageType: %w", err)
	}
	return oldValue.PassageType, nil
}

// ResetPassageType resets all changes to the "passage_type" field.
func (m *FareMutation) ResetPassageType() {
	m.passage_type = nil
}

// SetFirstTravelDate sets the "first_travel_date" field.
func (m *FareMutation) SetFirstTravelDate(t time.Time) {
	m.first_travel_date = &t
}

// FirstTravelDate returns the value of the "first_travel_date" field in the mutation.
func (m *FareMutation) FirstTravelDate() (r time.Time, exists bool) {
	v := m.first_travel_date
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstTravelDate returns the old "first_travel_date" field's value of the Fare entity.
// If the Fare object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FareMutation) OldFirstTravelDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFirstTravelDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFirstTravelDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstTravelDate: %w", err)
	}
	return oldValue.FirstTravelDate, nil
}

// ResetFirstTravelDate resets all changes to the "first_travel_date" field.
func (m *FareMutation) ResetFirstTravelDate() {
	m.first_travel_date = nil
}

// SetLastTravelDate sets the "last_travel_date" field.
func (m *FareMutation) SetLastTravelDate(t time.Time) {
	m.last_travel_date = &t
}

// LastTravelDate returns the value of the "last_travel_date" field in the mutation.
func (m *FareMutation) LastTravelDate() (r time.Time, exists bool) {
	v := m.last_travel_date
	if v == nil {
		return
	}
	return *v, true
}

// OldLastTravelDate returns the old "last_travel_date" field's value of the Fare entity.
// If the Fare object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FareMutation) OldLastTravelDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastTravelDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastTravelDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastTravelDate: %w", err)
	}
	return oldValue.LastTravelDate, nil
}

// ResetLastTravelDate resets all changes to the "last_travel_date" field.
func (m *FareMutation) ResetLastTravelDate() {
	m.last_travel_date = nil
}

// SetAmount sets the "amount" field.
func (m *FareMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *FareMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Fare entity.
// If the Fare object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FareMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *FareMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *FareMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *FareMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FareMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FareMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Fare entity.
// If the Fare object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FareMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FareMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FareMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FareMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Fare entity.
// If the Fare object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FareMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FareMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Op returns the operation name.
func (m *FareMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Fare).
func (m *FareMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FareMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.org_airport != nil {
		fields = append(fields, fare.FieldOrgAirport)
	}
	if m.arr_airport != nil {
		fields = append(fields, fare.FieldArrAirport)
	}
	if m.passage_type != nil {
		fields = append(fields, fare.FieldPassageType)
	}
	if m.first_travel_date != nil {
		fields = append(fields, fare.FieldFirstTravelDate)
	}
	if m.last_travel_date != nil {
		fields = append(fields, fare.FieldLastTravelDate)
	}
	if m.amount != nil {
		fields = append(fields, fare.FieldAmount)
	}
	if m.created_at != nil {
		fields = append(fields, fare.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, fare.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FareMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fare.FieldOrgAirport:
		return m.OrgAirport()
	case fare.FieldArrAirport:
		return m.ArrAirport()
	case fare.FieldPassageType:
		return m.PassageType()
	case fare.FieldFirstTravelDate:
		return m.FirstTravelDate()
	case fare.FieldLastTravelDate:
		return m.LastTravelDate()
	case fare.FieldAmount:
		return m.Amount()
	case fare.FieldCreatedAt:
		return m.CreatedAt()
	case fare.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FareMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fare.FieldOrgAirport:
		return m.OldOrgAirport(ctx)
	case fare.FieldArrAirport:
		return m.OldArrAirport(ctx)
	case fare.FieldPassageType:
		return m.OldPassageType(ctx)
	case fare.FieldFirstTravelDate:
		return m.OldFirstTravelDate(ctx)
	case fare.FieldLastTravelDate:
		return m.OldLastTravelDate(ctx)
	case fare.FieldAmount:
		return m.OldAmount(ctx)
	case fare.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case fare.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Fare field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FareMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fare.FieldOrgAirport:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgAirport(v)
		return nil
	case fare.FieldArrAirport:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArrAirport(v)
		return nil
	case fare.FieldPassageType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassageType(v)
		return nil
	case fare.FieldFirstTravelDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstTravelDate(v)
		return nil
	case fare.FieldLastTravelDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastTravelDate(v)
		return nil
	case fare.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case fare.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case fare.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Fare field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FareMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, fare.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FareMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fare.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FareMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fare.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Fare numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FareMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FareMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FareMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Fare nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FareMutation) ResetField(name string) error {
	switch name {
	case fare.FieldOrgAirport:
		m.ResetOrgAirport()
		return nil
	case fare.FieldArrAirport:
		m.ResetArrAirport()
		return nil
	case fare.FieldPassageType:
		m.ResetPassageType()
		return nil
	case fare.FieldFirstTravelDate:
		m.ResetFirstTravelDate()
		return nil
	case fare.FieldLastTravelDate:
		m.ResetLastTravelDate()
		return nil
	case fare.FieldAmount:
		m.ResetAmount()
		return nil
	case fare.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case fare.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Fare field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FareMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FareMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FareMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FareMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FareMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FareMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FareMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Fare unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FareMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Fare edge %s", name)
}
