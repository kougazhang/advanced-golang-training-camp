// Code generated by entc, DO NOT EDIT.

package fare

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/webmin7761/go-school/homework/final/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OrgAirport applies equality check predicate on the "org_airport" field. It's identical to OrgAirportEQ.
func OrgAirport(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgAirport), v))
	})
}

// ArrAirport applies equality check predicate on the "arr_airport" field. It's identical to ArrAirportEQ.
func ArrAirport(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArrAirport), v))
	})
}

// PassageType applies equality check predicate on the "passage_type" field. It's identical to PassageTypeEQ.
func PassageType(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassageType), v))
	})
}

// FirstTravelDate applies equality check predicate on the "first_travel_date" field. It's identical to FirstTravelDateEQ.
func FirstTravelDate(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstTravelDate), v))
	})
}

// LastTravelDate applies equality check predicate on the "last_travel_date" field. It's identical to LastTravelDateEQ.
func LastTravelDate(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTravelDate), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Fare {
	vc := float64(v)
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), vc))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// OrgAirportEQ applies the EQ predicate on the "org_airport" field.
func OrgAirportEQ(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportNEQ applies the NEQ predicate on the "org_airport" field.
func OrgAirportNEQ(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportIn applies the In predicate on the "org_airport" field.
func OrgAirportIn(vs ...string) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrgAirport), v...))
	})
}

// OrgAirportNotIn applies the NotIn predicate on the "org_airport" field.
func OrgAirportNotIn(vs ...string) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrgAirport), v...))
	})
}

// OrgAirportGT applies the GT predicate on the "org_airport" field.
func OrgAirportGT(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportGTE applies the GTE predicate on the "org_airport" field.
func OrgAirportGTE(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportLT applies the LT predicate on the "org_airport" field.
func OrgAirportLT(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportLTE applies the LTE predicate on the "org_airport" field.
func OrgAirportLTE(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportContains applies the Contains predicate on the "org_airport" field.
func OrgAirportContains(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportHasPrefix applies the HasPrefix predicate on the "org_airport" field.
func OrgAirportHasPrefix(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportHasSuffix applies the HasSuffix predicate on the "org_airport" field.
func OrgAirportHasSuffix(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportEqualFold applies the EqualFold predicate on the "org_airport" field.
func OrgAirportEqualFold(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrgAirport), v))
	})
}

// OrgAirportContainsFold applies the ContainsFold predicate on the "org_airport" field.
func OrgAirportContainsFold(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrgAirport), v))
	})
}

// ArrAirportEQ applies the EQ predicate on the "arr_airport" field.
func ArrAirportEQ(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArrAirport), v))
	})
}

// ArrAirportNEQ applies the NEQ predicate on the "arr_airport" field.
func ArrAirportNEQ(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArrAirport), v))
	})
}

// ArrAirportIn applies the In predicate on the "arr_airport" field.
func ArrAirportIn(vs ...string) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArrAirport), v...))
	})
}

// ArrAirportNotIn applies the NotIn predicate on the "arr_airport" field.
func ArrAirportNotIn(vs ...string) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArrAirport), v...))
	})
}

// ArrAirportGT applies the GT predicate on the "arr_airport" field.
func ArrAirportGT(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArrAirport), v))
	})
}

// ArrAirportGTE applies the GTE predicate on the "arr_airport" field.
func ArrAirportGTE(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArrAirport), v))
	})
}

// ArrAirportLT applies the LT predicate on the "arr_airport" field.
func ArrAirportLT(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArrAirport), v))
	})
}

// ArrAirportLTE applies the LTE predicate on the "arr_airport" field.
func ArrAirportLTE(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArrAirport), v))
	})
}

// ArrAirportContains applies the Contains predicate on the "arr_airport" field.
func ArrAirportContains(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArrAirport), v))
	})
}

// ArrAirportHasPrefix applies the HasPrefix predicate on the "arr_airport" field.
func ArrAirportHasPrefix(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArrAirport), v))
	})
}

// ArrAirportHasSuffix applies the HasSuffix predicate on the "arr_airport" field.
func ArrAirportHasSuffix(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArrAirport), v))
	})
}

// ArrAirportEqualFold applies the EqualFold predicate on the "arr_airport" field.
func ArrAirportEqualFold(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArrAirport), v))
	})
}

// ArrAirportContainsFold applies the ContainsFold predicate on the "arr_airport" field.
func ArrAirportContainsFold(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArrAirport), v))
	})
}

// PassageTypeEQ applies the EQ predicate on the "passage_type" field.
func PassageTypeEQ(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassageType), v))
	})
}

// PassageTypeNEQ applies the NEQ predicate on the "passage_type" field.
func PassageTypeNEQ(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassageType), v))
	})
}

// PassageTypeIn applies the In predicate on the "passage_type" field.
func PassageTypeIn(vs ...string) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassageType), v...))
	})
}

// PassageTypeNotIn applies the NotIn predicate on the "passage_type" field.
func PassageTypeNotIn(vs ...string) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassageType), v...))
	})
}

// PassageTypeGT applies the GT predicate on the "passage_type" field.
func PassageTypeGT(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassageType), v))
	})
}

// PassageTypeGTE applies the GTE predicate on the "passage_type" field.
func PassageTypeGTE(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassageType), v))
	})
}

// PassageTypeLT applies the LT predicate on the "passage_type" field.
func PassageTypeLT(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassageType), v))
	})
}

// PassageTypeLTE applies the LTE predicate on the "passage_type" field.
func PassageTypeLTE(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassageType), v))
	})
}

// PassageTypeContains applies the Contains predicate on the "passage_type" field.
func PassageTypeContains(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassageType), v))
	})
}

// PassageTypeHasPrefix applies the HasPrefix predicate on the "passage_type" field.
func PassageTypeHasPrefix(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassageType), v))
	})
}

// PassageTypeHasSuffix applies the HasSuffix predicate on the "passage_type" field.
func PassageTypeHasSuffix(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassageType), v))
	})
}

// PassageTypeEqualFold applies the EqualFold predicate on the "passage_type" field.
func PassageTypeEqualFold(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassageType), v))
	})
}

// PassageTypeContainsFold applies the ContainsFold predicate on the "passage_type" field.
func PassageTypeContainsFold(v string) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassageType), v))
	})
}

// FirstTravelDateEQ applies the EQ predicate on the "first_travel_date" field.
func FirstTravelDateEQ(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstTravelDate), v))
	})
}

// FirstTravelDateNEQ applies the NEQ predicate on the "first_travel_date" field.
func FirstTravelDateNEQ(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstTravelDate), v))
	})
}

// FirstTravelDateIn applies the In predicate on the "first_travel_date" field.
func FirstTravelDateIn(vs ...time.Time) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstTravelDate), v...))
	})
}

// FirstTravelDateNotIn applies the NotIn predicate on the "first_travel_date" field.
func FirstTravelDateNotIn(vs ...time.Time) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstTravelDate), v...))
	})
}

// FirstTravelDateGT applies the GT predicate on the "first_travel_date" field.
func FirstTravelDateGT(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstTravelDate), v))
	})
}

// FirstTravelDateGTE applies the GTE predicate on the "first_travel_date" field.
func FirstTravelDateGTE(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstTravelDate), v))
	})
}

// FirstTravelDateLT applies the LT predicate on the "first_travel_date" field.
func FirstTravelDateLT(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstTravelDate), v))
	})
}

// FirstTravelDateLTE applies the LTE predicate on the "first_travel_date" field.
func FirstTravelDateLTE(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstTravelDate), v))
	})
}

// LastTravelDateEQ applies the EQ predicate on the "last_travel_date" field.
func LastTravelDateEQ(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTravelDate), v))
	})
}

// LastTravelDateNEQ applies the NEQ predicate on the "last_travel_date" field.
func LastTravelDateNEQ(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastTravelDate), v))
	})
}

// LastTravelDateIn applies the In predicate on the "last_travel_date" field.
func LastTravelDateIn(vs ...time.Time) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastTravelDate), v...))
	})
}

// LastTravelDateNotIn applies the NotIn predicate on the "last_travel_date" field.
func LastTravelDateNotIn(vs ...time.Time) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastTravelDate), v...))
	})
}

// LastTravelDateGT applies the GT predicate on the "last_travel_date" field.
func LastTravelDateGT(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastTravelDate), v))
	})
}

// LastTravelDateGTE applies the GTE predicate on the "last_travel_date" field.
func LastTravelDateGTE(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastTravelDate), v))
	})
}

// LastTravelDateLT applies the LT predicate on the "last_travel_date" field.
func LastTravelDateLT(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastTravelDate), v))
	})
}

// LastTravelDateLTE applies the LTE predicate on the "last_travel_date" field.
func LastTravelDateLTE(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastTravelDate), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Fare {
	vc := float64(v)
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), vc))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Fare {
	vc := float64(v)
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), vc))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Fare {
	vc := float64(v)
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), vc))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Fare {
	vc := float64(v)
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), vc))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Fare {
	vc := float64(v)
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), vc))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Fare {
	vc := float64(v)
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), vc))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Fare {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fare(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fare) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fare) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fare) predicate.Fare {
	return predicate.Fare(func(s *sql.Selector) {
		p(s.Not())
	})
}
