// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package travel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TravelServiceClient is the client API for TravelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelServiceClient interface {
	//旅游推荐
	Query(ctx context.Context, in *TravelRequest, opts ...grpc.CallOption) (*TravelResponse, error)
}

type travelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelServiceClient(cc grpc.ClientConnInterface) TravelServiceClient {
	return &travelServiceClient{cc}
}

func (c *travelServiceClient) Query(ctx context.Context, in *TravelRequest, opts ...grpc.CallOption) (*TravelResponse, error) {
	out := new(TravelResponse)
	err := c.cc.Invoke(ctx, "/travel.TravelService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelServiceServer is the server API for TravelService service.
// All implementations must embed UnimplementedTravelServiceServer
// for forward compatibility
type TravelServiceServer interface {
	//旅游推荐
	Query(context.Context, *TravelRequest) (*TravelResponse, error)
	mustEmbedUnimplementedTravelServiceServer()
}

// UnimplementedTravelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTravelServiceServer struct {
}

func (UnimplementedTravelServiceServer) Query(context.Context, *TravelRequest) (*TravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedTravelServiceServer) mustEmbedUnimplementedTravelServiceServer() {}

// UnsafeTravelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelServiceServer will
// result in compilation errors.
type UnsafeTravelServiceServer interface {
	mustEmbedUnimplementedTravelServiceServer()
}

func RegisterTravelServiceServer(s grpc.ServiceRegistrar, srv TravelServiceServer) {
	s.RegisterService(&TravelService_ServiceDesc, srv)
}

func _TravelService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/travel.TravelService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServiceServer).Query(ctx, req.(*TravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TravelService_ServiceDesc is the grpc.ServiceDesc for TravelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TravelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "travel.TravelService",
	HandlerType: (*TravelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _TravelService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "travel.proto",
}
